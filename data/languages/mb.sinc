# Xavier McCaig and Frank Tursi
# Beginning SLEIGH Code for 32-bit MicroBlaze

define endian     = $(ENDIAN);
define alignment  = 4;

define space ram      type=ram_space        size=4 default;
define space register type=register_space   size=4;

define register offset=0 size=4
  [ r0 r1 r2 r3 r4 r5 r6 r7	r8 r9 r10 r11 r12 r13 r14 r15 r16 r17 r18 r19 r20 r21 r22 r23 r24 r25 r26 r27 r28 r29 r30 r31 ];

define register offset=0x80 size=4
  [ pc msr ear esr fsr btr edr slr shr pid zpr tlblo tlbhi tlbx tlbsx ] ;

define register offset=0xBC size=4
  [ pvr0 pvr1 pvr2 pvr3 pvr4 pvr5 pvr6 pvr7 pvr8 pvr9 pvr10 pvr11 pvr12 ] ;

@define FSR_IO    "fsr[27,1]"
@define FSR_DZ    "fsr[28,1]"
@define FSR_OF    "fsr[29,1]"
@define FSR_UF    "fsr[30,1]"
@define FSR_DO    "fsr[31,1]"

@define MSR_CC    "msr[0,32]"
@define MSR_VMS   "msr[17,1]"
@define MSR_VM    "msr[18,1]"
@define MSR_UMS   "msr[19,1]"
@define MSR_UM    "msr[20,1]"
@define MSR_PVR   "msr[21,1]"
@define MSR_EIP   "msr[22,1]"
@define MSR_EE    "msr[23,1]"
@define MSR_DCE   "msr[24,1]"
@define MSR_DZO   "msr[25,1]"
@define MSR_ICE   "msr[26,1]"
@define MSR_FSL   "msr[27,1]"
@define MSR_BIP   "msr[28,1]"
@define MSR_C     "msr[29,1]"
@define MSR_IE    "msr[30,1]"

@define ESR_DS    "esr[19,1]"
@define ESR_ESS   "esr[20,5]"
@define ESR_EC    "esr[27,5]"

define token instr(32)
      op05 = (0,5)
      rD = (6,10)
      rA = (11,15)
      rB = (16,20)
      cond2131 = (21,31)
      cond1631 = (16,31)
      imm = (16,21)
;

attach variables [ rD rA rB ] [ r0 r1 r2 r3 r4 r5 r6 r7	r8 r9 r10 r11 r12 r13 r14 r15 r16 r17 r18 r19 r20 r21 r22 r23 r24 r25 r26 r27 r28 r29 r30 r31 ];

:add rD, rA, rB is op05=0b000000 & rD & rA & rB & cond2131=0b00000000000 {}
:rsub rD, rA, rB is op05=0b000001 & rD & rA & rB & cond2131=0b00000000000 {}
:addc rD, rA, rB is op05=0b000010 & rD & rA & rB & cond2131=0b00000000000 {}
:rsubc rD, rA, rB is op05=0b000011 & rD & rA & rB & cond2131=0b00000000000 {}
:addk rD, rA, rB is op05=0b000100 & rD & rA & rB & cond2131=0b00000000000 {}
:rsubk rD, rA, rB is op05=0b000101 & rD & rA & rB & cond2131=0b00000000000 {}
:cmp rD, rA, rB is op05=0b000101 & rD & rA & rB & cond2131=0b00000000001 {}
:cmpu rD, rA, rB is op05=0b000101 & rD & rA & rB & cond2131=0b00000000011 {}
:addkc rD, rA, rB is op05=0b000110 & rD & rA & rB & cond2131=0b00000000000 {}
:rsubkc rD, rA, rB is op05=0b000111 & rD & rA & rB & cond2131=0b00000000000 {}
#:addi rD, rA, imm  is op05=0b001000 & rD & rA & imm {}
#:rsubi rD, rA, imm is op05=0b001001 & rD & rA & imm {}
#:addic rD, rA, imm
#:rsubic rD, rA, imm
#:addik rD, rA, imm
#:rsubik rD, rA, imm
#:addikc rD, rA, imm
#:rsubikc rD, rA, imm
#:mul rD, rA, rB
#:mulh rD, rA, rB
#:mulhu rD, rA, rB
#:mulhsu rD, rA, rB
#:bsrl rD, rA, rB
#:bsra rD, rA, rB
#:bsll rD, rA, rB
#:idiv rD, rA, rB
#:idivu rD, rA, rB
#:getd rD, rB
#:putd rD, rB
#:fadd rD, rA, rB
#:frsub rD, rA, rB
#:fmul rD, rA, rB
#:fdiv rD, rA, rB
#:fcmp rD, rA, rB
#:flt rD, rA
#:fint rD, rA
#:fsqrt rD, rA
#:muli rD, rA, imm
#:bsi rD, rA, imm
#:get rD, FSLx
#:put rD, FSLx
# :or rD, rA, rB is op05=0b100000 & rD & rA & rB & cond2131=0b00000000000 {}
# :pcmpbf rD, rA, rB
# :and rD, rA, rB
# :pcmpeq rD, rA, rB
# :xor rD, rA, rB
# :andn rD, rA, rB
# :pcmpne rD, rA, rB
# :clz rD, rA
# :sext8 rD, rA
# :sext16 rD, rA
# :sra rD, rA
# :src rD, rA
# :srl rD, rA
# :swapb rD, rA
# :swaph rD, rA
# :wdc rA, rB
# :wic rA, rB
# :mfs rD, sA              ####Sa?
# :msrclr rD, imm
# :msrset rD, imm
# :mts sD, rA
# :br rB
# :brk rD, rB
# :beq rA, rB
# :bge rA, rB
# :bgt rA, rB
# :ble rA, rB
# :blt rA, rB
# :bne rA, rB
# :ori rD, rA, imm
# :andi rD, rA, imm
# :xori rD, rA, imm
# :andni rD, rA, imm
# :imm imm
# :rtbd rA, imm
# :rtid rA, imm
# :rted rA, imm
:rtsd rA, imm is op05=0b101101 & rA & imm {}
# :bri imm
# :brki rD, imm
# :mbar imm
# :beqi rA, imm
# :bgei rA, imm
# :bgti rA, imm
# :blei rA, imm
# :blti rA, imm
# :bnei rA, imm
# :lbu rD, rA, rB
# :lhu rD, rA, rB
# :lw rD, rA, rB
# :lwx rD, rA, rB
# :sb rD, rA, rB
# :sh rD, rA, rB
# :sw rD, rA, rB
# :swx rD, rA, rB
# :lbui rD, rA, imm
# :lhui rD, rA, imm
# :lwi rD, rA, imm
# :sbi rD, rA, imm
# :shi rD, rA, imm
# :swi rD, rA, imm
