# Xavier McCaig and Frank Tursi
# Beginning SLEIGH Code for 32-bit MicroBlaze

define endian     = $(ENDIAN);
define alignment  = 4;

define space ram      type=ram_space        size=4 default;
define space register type=register_space   size=4;

define register offset=0 size=4
  [ r0 r1 r2 r3 r4 r5 r6 r7	r8 r9 r10 r11 r12 r13 r14 r15 r16 r17 r18 r19 r20 r21 r22 r23 r24 r25 r26 r27 r28 r29 r30 r31 ];

define register offset=0x80 size=4
  [ pc msr ear esr fsr btr edr slr shr pid zpr tlblo tlbhi tlbx tlbsx ] ;

define register offset=0xBC size=4
  [ pvr0 pvr1 pvr2 pvr3 pvr4 pvr5 pvr6 pvr7 pvr8 pvr9 pvr10 pvr11 pvr12 ] ;

@define FSR_IO    "fsr[27,1]"
@define FSR_DZ    "fsr[28,1]"
@define FSR_OF    "fsr[29,1]"
@define FSR_UF    "fsr[30,1]"
@define FSR_DO    "fsr[31,1]"

@define MSR_CC    "msr[0,32]"
@define MSR_VMS   "msr[17,1]"
@define MSR_VM    "msr[18,1]"
@define MSR_UMS   "msr[19,1]"
@define MSR_UM    "msr[20,1]"
@define MSR_PVR   "msr[21,1]"
@define MSR_EIP   "msr[22,1]"
@define MSR_EE    "msr[23,1]"
@define MSR_DCE   "msr[24,1]"
@define MSR_DZO   "msr[25,1]"
@define MSR_ICE   "msr[26,1]"
@define MSR_FSL   "msr[27,1]"
@define MSR_BIP   "msr[28,1]"
@define MSR_C     "msr[29,1]"
@define MSR_IE    "msr[30,1]"

@define ESR_DS    "esr[19,1]"
@define ESR_ESS   "esr[20,5]"
@define ESR_EC    "esr[27,5]"

define token instr(32)
      op05 = (0,5)
      rD = (6,10)
      rA = (11,15)
      rB = (16,20)
      cond2131 = (21,31)
      cond1631 = (16,31)
      cond2627 = (26,27)
      imm = (16,31)
      immw = (21,25)
      imms = (27,31)
      bar1620 = (16,20)
      bar2126 = (21,26)
;

attach variables [ rD rA rB ] [ r0 r1 r2 r3 r4 r5 r6 r7	r8 r9 r10 r11 r12 r13 r14 r15 r16 r17 r18 r19 r20 r21 r22 r23 r24 r25 r26 r27 r28 r29 r30 r31 ];

:add rD, rA, rB is op05=0b000000 & rD & rA & rB & cond2131=0b00000000000 {}
:rsub rD, rA, rB is op05=0b000001 & rD & rA & rB & cond2131=0b00000000000 {}
:addc rD, rA, rB is op05=0b000010 & rD & rA & rB & cond2131=0b00000000000 {}
:rsubc rD, rA, rB is op05=0b000011 & rD & rA & rB & cond2131=0b00000000000 {}
:addk rD, rA, rB is op05=0b000100 & rD & rA & rB & cond2131=0b00000000000 {}
:rsubk rD, rA, rB is op05=0b000101 & rD & rA & rB & cond2131=0b00000000000 {}
:cmp rD, rA, rB is op05=0b000101 & rD & rA & rB & cond2131=0b00000000001 {}
:cmpu rD, rA, rB is op05=0b000101 & rD & rA & rB & cond2131=0b00000000011 {}
:addkc rD, rA, rB is op05=0b000110 & rD & rA & rB & cond2131=0b00000000000 {}
:rsubkc rD, rA, rB is op05=0b000111 & rD & rA & rB & cond2131=0b00000000000 {}
:addi rD, rA, imm  is op05=0b001000 & rD & rA & imm {}
:rsubi rD, rA, imm is op05=0b001001 & rD & rA & imm {}
:addic rD, rA, imm is op05=0b001010 & rD & rA & imm {}
:rsubic rD, rA, imm is op05=0b001011 & rD & rA & imm {}
:addik rD, rA, imm is op05=0b001100 & rD & rA & imm {}
:rsubik rD, rA, imm is op05=0b001101 & rD & rA & imm {}
:addikc rD, rA, imm is op05=0b001110 & rD & rA & imm {}
:rsubikc rD, rA, imm is op05=0b001111 & rD & rA & imm {}
:mul rD, rA, rB is op05=0b010000 & rD & rA & rB & cond2131=0b00000000000 {}
:mulh rD, rA, rB is op05=0b010000 & rD & rA & rB & cond2131=0b00000000001 {}
:mulhu rD, rA, rB is op05=0b010000 & rD & rA & rB & cond2131=0b00000000011 {}
:mulhsu rD, rA, rB is op05=0b010000 & rD & rA & rB & cond2131=0b00000000010 {}
:bsrl rD, rA, rB is op05=0b010001 & rD & rA & rB & cond2131=0b00000000000 {}
:bsra rD, rA, rB is op05=0b010001 & rD & rA & rB & cond2131=0b01000000000 {}
:bsll rD, rA, rB is op05=0b010001 & rD & rA & rB & cond2131=0b10000000000 {}
:idiv rD, rA, rB is op05=0b010010 & rD & rA & rB & cond2131=0b00000000000 {}
:idivu rD, rA, rB is op05=0b010010 & rD & rA & rB & cond2131=0b00000000010 {}
#:getd rD, rB
#:putd rD, rB
:fadd rD, rA, rB is op05=0b010110 & rD & rA & rB & cond2131=0b00000000000 {}
:frsub rD, rA, rB is op05=0b010110 & rD & rA & rB & cond2131=0b00010000000 {}
:fmul rD, rA, rB is op05=0b010110 & rD & rA & rB & cond2131=0b00100000000 {}
:fdiv rD, rA, rB is op05=0b010110 & rD & rA & rB & cond2131=0b00110000000 {}
:fcmp rD, rA, rB is op05=0b010110 & rD & rA & rB & cond2131=0b10000000000 {}
:flt rD, rA is op05=0b010110 & rD & rA & cond1631=0b0000001010000000 {}
:fint rD, rA is op05=0b010110 & rD & rA & cond1631=0b0000001100000000 {}	
:fsqrt rD, rA is op05=0b010110 & rD & rA & cond1631=0b0000001110000000 {}
:muli rD, rA, imm is op05=0b011000 & rD & rA & imm {}
:bsrli rD, rA, imms is op05=0b011001 & rD & rA & bar1620=0b00000 & bar2126=0b000000 & imms {}
:bsrai rD, rA, imms is op05=0b011001 & rD & rA & bar1620=0b00000 & bar2126=0b010000 & imms {}
:bslli rD, rA, imms is op05=0b011001 & rD & rA & bar1620=0b00000 & bar2126=0b100000 & imms {}
:bsefi rD, rA, immw, imms is op05=0b011001 & rD & rA & bar1620=0b01000 & immw & cond2627=0 & imms {}
:bsifi rD, rA, immw, imms is op05=0b011001 & rD & rA & bar1620=0b10000 & immw & cond2627=0 & imms {}
#:get rD, FSLx
#:put rD, FSLx
:or rD, rA, rB is op05=0b100000 & rD & rA & rB & cond2131=0b00000000000 {}
:pcmpbf rD, rA, rB is op05=0b100000 & rD & rA & rB & cond2131=0b10000000000 {}
:and rD, rA, rB is op05=0b100001 & rD & rA & rB & cond2131=0b00000000000 {}
:pcmpeq rD, rA, rB is op05=0b100010 & rD & rA & rB & cond2131=0b10000000000 {}
:xor rD, rA, rB is op05=0b100010 & rD & rA & rB & cond2131=0b00000000000 {}
:andn rD, rA, rB is op05=0b100011 & rD & rA & rB & cond2131=0b00000000000 {}
:pcmpne rD, rA, rB is op05=0b100011 & rD & rA & rB & cond2131=0b10000000000 {}
:clz rD, rA is op05=0b100100 & rD & rA & cond1631=0b0000000011100000 {}
:sext8 rD, rA is op05=0b100100 & rD & rA & cond1631=0b0000000001100000 {}
:sext16 rD, rA is op05=0b100100 & rD & rA & cond1631=0b0000000001100001 {}
:sra rD, rA is op05=0b100100 & rD & rA & cond1631=0b0000000000000001 {}
:src rD, rA is op05=0b100100 & rD & rA & cond1631=0b0000000000100001 {}
:srl rD, rA is op05=0b100100 & rD & rA & cond1631=0b0000000001000001 {}
#:swapb rD, rA
#:swaph rD, rA
#:wdc rA, rB
#:wic rA, rB
#:mfs rD, sA              ####Sa?
#:msrclr rD, imm
#:msrset rD, imm
#:mts sD, rA
#:br rB
#:brk rD, rB
#:beq rA, rB
#:bge rA, rB
#:bgt rA, rB
#:ble rA, rB
#:blt rA, rB
#:bne rA, rB
#:ori rD, rA, imm
#:andi rD, rA, imm
#:xori rD, rA, imm
#:andni rD, rA, imm
#:imm imm
#:rtbd rA, imm
#:rtid rA, imm
#:rted rA, imm
:tsd rA, imm is op05=0b101101 & rA & imm {}
#:bri imm
#:brki rD, imm
#:mbar imm
#:beqi rA, imm
#:bgei rA, imm
#:bgti rA, imm
#:blei rA, imm
#:blti rA, imm
#:bnei rA, imm
#:lbu rD, rA, rB
#:lhu rD, rA, rB
#:lw rD, rA, rB
#:lwx rD, rA, rB
#:sb rD, rA, rB
#:sh rD, rA, rB
#:sw rD, rA, rB
#:swx rD, rA, rB
#:lbui rD, rA, imm
#:lhui rD, rA, imm
#:lwi rD, rA, imm
#:sbi rD, rA, imm
#:shi rD, rA, imm
#:swi rD, rA, imm
